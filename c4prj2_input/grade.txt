Grading at Fri 31 Dec 2021 05:53:37 AM UTC
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==673== Memcheck, a memory error detector
==673== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==673== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==673== Command: ./tester i1 i2
==673== Parent PID: 672
==673== 
==673== Invalid read of size 8
==673==    at 0x109A92: read_input (in /graderhome/work/c4prj2_input/tester)
==673==    by 0x10AE12: main (in /graderhome/work/c4prj2_input/tester)
==673==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==673== 
==673== 
==673== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==673==  Access not within mapped region at address 0x8
==673==    at 0x109A92: read_input (in /graderhome/work/c4prj2_input/tester)
==673==    by 0x10AE12: main (in /graderhome/work/c4prj2_input/tester)
==673==  If you believe this happened as a result of a stack
==673==  overflow in your program's main thread (unlikely but
==673==  possible), you can try to increase the size of the
==673==  main thread stack using the --main-stacksize= flag.
==673==  The main thread stack size used in this run was 8388608.
==673== 
==673== HEAP SUMMARY:
==673==     in use at exit: 1,746 bytes in 73 blocks
==673==   total heap usage: 105 allocs, 32 frees, 4,402 bytes allocated
==673== 
==673== LEAK SUMMARY:
==673==    definitely lost: 216 bytes in 4 blocks
==673==    indirectly lost: 280 bytes in 29 blocks
==673==      possibly lost: 0 bytes in 0 blocks
==673==    still reachable: 1,250 bytes in 40 blocks
==673==         suppressed: 0 bytes in 0 blocks
==673== Rerun with --leak-check=full to see details of leaked memory
==673== 
==673== For lists of detected and suppressed errors, rerun with: -s
==673== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: B
